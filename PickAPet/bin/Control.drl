package com.petpicker

import java.util.ArrayList;
  import java.io.BufferedReader;
  import java.io.IOException;
  import java.io.InputStreamReader;

rule "allergyGeneral"
	salience 100
    when
        not (exists (Property(type=="allergyGeneral")))
    then
        Property allergy = MainWindow.setQuestion("allergy");
        insert (new Property(allergy.getType(), allergy.getValue()));
end


rule "allergySpecificI"
	salience 100
	when
	    not (exists (Property(type=="allergyType")))
		Property(type=="allergy" && value=="tak")
	then
		Property allergyType = MainWindow.setQuestion("allergyType");
		insert (new Property(allergyType.getType(), allergyType.getValue()));
end

rule "family"
    salience 99
    when
        not (exists (Property(type=="family")))
    then
    	Property family = MainWindow.setQuestion("family");
    	insert (new Property(family.getType(), family.getValue()));
end

rule "childSubstitute"
	salience 97
    when
      	not (exists (Property(type=="childSubstitute")))  
		(or (Property(type=="family" && value=="nie"))
			(Property(type=="children" && value=="nie"))
		
		)
		(or (Property (type=="dogPossible" && value=="tak"))
			(Property (type=="catPossible" && value=="tak"))
		)
    then
    	Property childSubstitute = MainWindow.setQuestion("childSubstitute");
    	insert (new Property(childSubstitute.getType(), childSubstitute.getValue()));
end

rule "allergySpecificII"
    salience 100
	when
	    not (exists (Property(type=="familyAllergyType"))) 
		Property(type=="familyAllergy" && value=="tak")
	then
		Property allergySpecific = MainWindow.setQuestion("allergySpecificII");
		insert (new Property(allergySpecific.getType(), allergySpecific.getValue()));
end

rule "familyAllergy"
    salience 100
    when
        not (exists (Property(type=="familyAllergy"))) 
		Property(type=="family" && value=="tak")
		not (exists( (Property(type=="allergyType" && value=="na większość zwierząt z sierścią"))))
    then
    	Property familyAllergy = MainWindow.setQuestion("familyAllergy");
    	insert (new Property(familyAllergy.getType(), familyAllergy.getValue()));
end

rule "children"
	salience 99
    when
    	not (exists (Property(type=="children"))) 
		Property(type=="family" && value=="tak")
    then
    	Property children = MainWindow.setQuestion( "children");
    	insert (new Property(children.getType(), children.getValue()));
end

rule "childrenAge"
	salience 99
    when
        not (exists (Property(type=="childrenAge"))) 
		Property(type=="children" && value=="tak")
    then
    	Property childrenAge = MainWindow.setQuestion("childrenAge");
    	insert (new Property(childrenAge.getType(), childrenAge.getValue()));
end

rule "timeRequirements"
	salience 80
    when
        not (exists (Property(type=="timeRequirements")))
	 		not (exists (Property(type=="childSubstitute" && value=="tak"))) 
    then
    	Property timeReq = MainWindow.setQuestion("timeRequirements");
		insert (new Property(timeReq.getType(), timeReq.getValue()));
end
rule "lifeExpectancy"
	salience 98
	when
			not (exists (Property(type=="lifeExpectancy"))) 
	then
	    	Property le = MainWindow.setQuestion("lifeExpectancy");
	    	insert (new Property(le.getType(), le.getValue()));
end 

rule "animalTraits"
	salience 80
	when
	 		not (exists (Property(type=="personality")))
	 		not (exists (Property(type=="childSubstitute" && value=="tak")))
	then
	    	Property traits = MainWindow.setQuestion("animalTraits");
	    	insert (new Property(traits.getType(), traits.getValue()));
end 

rule "timeAtHome"
	salience 79
    when
        not (exists (Property(type=="timeAtHome"))) 
		Property(type=="family" && value=="nie")
		not (exists (Property(type=="childSubstitute" && value=="tak")))
		(or (Property (type=="dogPossible" && value=="tak"))
			(Property (type=="catPossible" && value=="tak"))
		)
    then
    	Property time = MainWindow.setQuestion("timeAtHome");
    	insert (new Property(time.getType(), time.getValue()));
end

rule "space"
	salience 80
	when
		not (exists (Property(type=="space")))
		exists (Property(type=="homeType"))
		Property(type=="homeType" && value=="w mieszkaniu")
		(or (Property (type=="dogPossible" && value=="tak"))
			(Property (type=="catPossible" && value=="tak"))
		)
	then
		Property space = MainWindow.setQuestion("space");
		insert (new Property(space.getType(), space.getValue()));
end	

rule "otherAnimals"
	salience 91
    when
		(or (Property (type=="dogPossible" && value=="tak"))
			(Property (type=="catPossible" && value=="tak"))
		)
		not (exists (Property(type=="otherAnimals")))
    then
    	Property other = MainWindow.setQuestion("otherAnimals");
    	insert (new Property(other.getType(), other.getValue()));
end

rule "otherAnimalsSpecific"
    when
        not (exists (Property(type=="otherAnimalsFriendliness"))) 
		Property(type=="otherAnimals" && value=="tak")
    then
    	Property other2 = MainWindow.setQuestion("otherAnimalsSpecific");
    	insert (new Property(other2.getType(), other2.getValue()));
end

rule "activity"
	salience 90
	when
		not (exists (Property(type=="activity")))
		Property(type=="dogPossible" && value=="tak") 
	then
		Property activity = MainWindow.setQuestion("activity");
		insert (new Property(activity.getType(), activity.getValue()));
end 

rule "home"
	when
		not (exists (Property(type=="homeType"))) 
		Property(type=="dogPossible" && value=="tak")
	then
	    Property home = MainWindow.setQuestion("home");
	    insert (new Property(home.getType(), home.getValue()));	
end

rule "homeSurroundingsHouse"
	when
		not (exists (Property(type=="homeSurroundingsHouse")))
		exists (Property(type=="homeType"))
		Property(type=="homeType" && value=="w domu jednorodzinnym")
	then
		Property hs = MainWindow.setQuestion("homeSurroundingsHouse");
		insert (new Property(hs.getType(), hs.getValue()));
end

rule "homeSurroundingsFlat"
	when
		not (exists (Property(type=="homeSurroundingsFlat")))
		exists (Property(type=="homeType"))
		Property(type=="homeType" && value=="w mieszkaniu")
	then
		Property hs = MainWindow.setQuestion("homeSurroundingsFlat");
		insert (new Property(hs.getType(), hs.getValue()));
end 


rule "lifestyle"
	when
		not (exists (Property(type=="lifestyle")))
		Property(type=="dogPossible" && value=="nie")
		Property(type=="catPossible" && value=="nie")
		(or (Property(type=="timeRequirements" && value=="poniżej 0.5"))
			(Property(type=="cost" && value=="jak najniższy"))
		)
	then
		Property property = MainWindow.setQuestion("lifestyle");
		insert (new Property(property.getType(), property.getValue()));
end

rule "defense"
	when
		not (exists (Property(type=="defense")))	
		Property(type=="dogPossible" && value=="tak")
		Property(type=="homeType" && value=="w domu jednorodzinnym")
		not (exists (Property(type=="childSubstitute" && value=="tak")))
	then
		Property property = MainWindow.setQuestion("defense");
		insert (new Property(property.getType(), property.getValue()));
end

rule "hunting"
	when
		not (exists (Property(type=="hunting")))	
		Property(type=="dogPossible" && value=="tak")
		Property(type=="homeType" && value=="w domu jednorodzinnym")
		not (exists (Property(type=="childSubstitute" && value=="tak")))
	then
		Property property = MainWindow.setQuestion("hunting");
		insert (new Property(property.getType(), property.getValue()));
end

rule "odour"
	when
		not (exists (Property(type=="odour")))
		Property(type=="dogPossible" && value=="nie")
		Property(type=="catPossible" && value=="nie")
		(or (Property(type=="timeRequirements" && value=="poniżej 0.5"))
			(Property(type=="cost" && value=="jak najniższy"))
		)
	then
		Property property = MainWindow.setQuestion("odour");
		insert (new Property(property.getType(), property.getValue()));
end

rule "animalActivity"
	when
		not (exists (Property(type=="animalActivity")))
		(or (Property(type=="dogPossible" && value=="tak"))
			(Property(type=="catPossible" && value=="tak"))
		)	
	then
		Property property = MainWindow.setQuestion("animalActivity");
		insert (new Property(property.getType(), property.getValue()));
end

rule "fur"
	when
		not (exists (Property(type=="fur")))	
		(or	(Property(type=="dogPossible" && value=="tak"))
			(Property(type=="catPossible" && value=="tak"))
		)
	then
		Property property = MainWindow.setQuestion("fur");
		insert (new Property(property.getType(), property.getValue()));
end

rule "dogPossible"
 	salience 101
 	when
 		not (exists( (Property(type=="allergyType" && value=="na psy"))))
 		not (exists( (Property(type=="allergyType" && value=="na większość zwierząt z sierścią"))))
 		not (exists( (Property(type=="familyAllergyType" && value=="na psy"))))
 	then
 		insert (new Property("dogPossible", "tak"));	
 end
 
  rule "catPossible"
  	salience 101
 	when
 		not (exists( (Property(type=="allergyType" && value=="na koty"))))
 		not (exists( (Property(type=="allergyType" && value=="na większość zwierząt z sierścią"))))
 		not (exists( (Property(type=="familyAllergyType" && value=="na koty"))))
 	then
 		insert (new Property("catPossible", "tak"));
 end
  
rule "excludeDog"
	salience 101
	when
		dog: Property(type=="dogPossible" && value=="tak")
		(or	(Property(type=="timeRequirements" && value=="poniżej 0.5"))
			(Property(type=="lifeExpectancy" && value=="poniżej 12"))
			(Property(type=="timeAtHome" && value=="tak"))
			(Property(type=="space" && value=="mało"))
			(Property(type=="lifestyle" && value=="w nocy"))
			(Property(type=="allergyType" && value=="na większość zwierząt z sierścią"))
			(Property(type=="familyAllergyType" && value=="na większość zwierząt z sierścią"))
			(Property(type=="allergyType" && value=="na psy"))
			(Property(type=="familyAllergyType" && value=="na psy"))
			(Property(type=="otherAnimalsFriendliness" && value=="koty"))
			(Property(type=="personality" && value=="niezależne"))
			(Property(type=="homeSurroundingsFlat" && value=="nie"))
		)  
	then
		modify (dog) {setValue("nie")};
end

rule "excludeCat"
	salience 101
	when
		cat: Property(type=="catPossible" && value=="tak")
		(or	(Property(type=="timeRequirements" && value=="poniżej 0.5"))
			(Property(type=="lifeExpectancy" && value=="poniżej 12"))
			(Property(type=="allergyType" && value=="na większość zwierząt z sierścią"))
			(Property(type=="familyAllergyType" && value=="na większość zwierząt z sierścią"))
			(Property(type=="allergyType" && value=="na koty"))
			(Property(type=="otherAnimalsFriendliness" && value=="psy"))
			(Property(type=="familyAllergyType" && value=="na koty"))
			(Property(type=="personality" && value=="towarzyskie"))
		)  
	then
		modify (cat) {setValue("nie")};
end 

rule "excludeFur"
	salience 101
	when
		(or (p1: Property(type=="allergyType" && value=="na koty")
		and p2: Property(type=="familyAllergyType" && value=="na psy")) 	
			(p1: Property(type=="allergyType" && value=="na psy")
		and p2: Property(type=="familyAllergyType" && value=="na koty"))
		)	
	then
		modify (p1) {setValue("na większość zwierząt z sierścią")};
		modify (p2) {setValue("na większość zwierząt z sierścią")};
end	
